<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

	<!-- PopcornFX Visualizers -->
	<!-- Copy this into c:\Users\<Your user folder>\My Documents\Visual Studio 2012\Visualizers -->

	<!--
		Compatibility notes:
		- on PS4: don't use __int*
		- on vs2013: don't use static const variable
	-->

	<!--
		FIXME: PS4 does not like enums (ie kAlignment)
	-->

	<Type Name="PopcornFX::CString">
		<DisplayString Condition="m_Container.m_Ptr == 0">{(void*)0, s}</DisplayString>
		<DisplayString Condition="(int)(m_Container.m_Ptr->m_Length) &lt; 0">{*((char**)((char*)m_Container.m_Ptr + (((sizeof(PopcornFX::CStringContainer) + 4) + (sizeof(void*) - 1)) &amp; ~(sizeof(void*) - 1)))),s}</DisplayString>
		<DisplayString Condition="(int)(m_Container.m_Ptr->m_Length) &gt;= 0">{(char*)((char*)m_Container.m_Ptr + sizeof(PopcornFX::CStringContainer) + (0xF - ((sizeof(PopcornFX::CStringContainer) + 0xF) &amp; 0xF))),s}</DisplayString>
		<StringView Condition="m_Container.m_Ptr == 0">null</StringView>
		<StringView Condition="(int)(m_Container.m_Ptr->m_Length) &lt; 0">*((char**)((char*)m_Container.m_Ptr + (((sizeof(PopcornFX::CStringContainer) + 4) + (sizeof(void*) - 1)) &amp; ~(sizeof(void*) - 1)))),s</StringView>
		<StringView Condition="(int)(m_Container.m_Ptr->m_Length) &gt;= 0">(char*)((char*)m_Container.m_Ptr + sizeof(PopcornFX::CStringContainer) + (0xF - ((sizeof(PopcornFX::CStringContainer) + 0xF) &amp; 0xF))),s</StringView>
	</Type>

	<Type Name="PopcornFX::CStringId">
		<DisplayString Condition="m_Id == 0">Id=0 null</DisplayString>
		<DisplayString Condition="m_Id != 0">Id={m_Id} {PopcornFX::CStringInternals::m_StringIdPool.m_Chunks[m_Id / PopcornFX::CStringInternals::kPoolChunkSize][m_Id % PopcornFX::CStringInternals::kPoolChunkSize]}</DisplayString>
		<Expand>
			<Item Name="string" Condition="m_Id != 0">PopcornFX::CStringInternals::m_StringIdPool.m_Chunks[m_Id / PopcornFX::CStringInternals::kPoolChunkSize][m_Id % PopcornFX::CStringInternals::kPoolChunkSize]</Item>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TRefPtr&lt;*&gt;">
		<DisplayString>{{RefPtr={(void*)m_Ptr}}}</DisplayString>
		<Expand>
			<ExpandedItem Condition="m_Ptr != 0">m_Ptr</ExpandedItem>
		</Expand>
	</Type>
	<Type Name="PopcornFX::TWeakPtr&lt;*&gt;">
		<DisplayString>{{WeakPtr={(void*)m_Ptr}}}</DisplayString>
		<Expand>
			<ExpandedItem Condition="m_Ptr != 0">m_Ptr</ExpandedItem>
		</Expand>
	</Type>
	<Type Name="PopcornFX::TScopedPtr&lt;*&gt;">
		<DisplayString>{{ScopedPtr={(void*)m_Ptr}}}</DisplayString>
		<Expand>
			<ExpandedItem Condition="m_Ptr != 0">m_Ptr</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TArray&lt;*,*&gt;">
		<DisplayString>{{A Count={m_Count}}}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>m_Count</Size>
				<ValuePointer>($T1*)m_Data</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TSemiDynamicArray&lt;*,*,*&gt;">
		<DisplayString Condition="(m_Count &amp; 0x80000000) != 0">{{SDA Count={m_Count &amp; 0x7FFFFFFF} Data={(void*)m_Allocated.m_Data}}</DisplayString>
		<DisplayString Condition="(m_Count &amp; 0x80000000) == 0">{{SDA Count={m_Count &amp; 0x7FFFFFFF} Data={(void*)(((unsigned long long)m_StaticData + kAlignment - 1) &amp; - kAlignment)}}</DisplayString>
		<Expand>
			<ArrayItems Condition="(m_Count &amp; 0x80000000) != 0">
				<Size>m_Count &amp; 0x7FFFFFFF</Size>
				<ValuePointer>($T1*)m_Allocated.m_Data</ValuePointer>
			</ArrayItems>
			<ArrayItems Condition="(m_Count &amp; 0x80000000) == 0">
				<Size>m_Count</Size>
				<ValuePointer>($T1*)(((unsigned long long)m_StaticData + kAlignment - 1) &amp; - kAlignment)</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TStackFixedArray&lt;*&gt;">
		<DisplayString>{{SFA Count={m_Count}, Data={(void*)m_Data}, Cap={m_Capacity}}}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>m_Count</Size>
				<ValuePointer>($T1*)m_Data</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TStaticArray&lt;*,*&gt;">
		<DisplayString>{{SA _Count={$T2}, Data={(void*)(((unsigned long long)_m_Data + kAlignment - 1) &amp; - kAlignment)}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>$T2</Size>
				<ValuePointer>($T1*)(((unsigned long long)_m_Data + kAlignment - 1) &amp; - kAlignment)</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TStaticCountedArray&lt;*,*&gt;">
		<DisplayString>{{SCA Count={m_Count}, Data={(void*)(((unsigned long long)_m_Data + kAlignment - 1) &amp; - kAlignment)}}}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>m_Count</Size>
				<ValuePointer>($T1*)(((unsigned long long)_m_Data + kAlignment - 1) &amp; - kAlignment)</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TChunkedArray&lt;*,*,*&gt;">
		<DisplayString>{{CA Count={$T2 * m_ChunksCount}({$T2}*{m_ChunksCount}), ChuncksCap={m_ChunksCapacity}}}</DisplayString>
		<Expand>
			<IndexListItems>
				<Size>$T2 * m_ChunksCount</Size>
				<ValueNode>m_Chunks[$i / $T2][$i % $T2]</ValueNode>
			</IndexListItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TStaticSlotArray&lt;*,*,*&gt;">
		<DisplayString>{{SlotA UsedCount={m_UsedSlots} _Count={$T2}}}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>$T2</Size>
				<ValuePointer>($T1*)m_Data</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TSlotArray&lt;*,*&gt;">
		<DisplayString>{{SlotA UsedCount={m_UsedSlots} Count={m_DataSizeInBytes / sizeof($T1)}}}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>m_DataSizeInBytes / sizeof($T1)</Size>
				<ValuePointer>($T1*)m_Data</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TMemoryView&lt;*&gt;">
		<DisplayString>{{MV Count={m_Count}, Data={(void*)m_Data}, sizeof={sizeof($T1)}}}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>m_Count</Size>
				<ValuePointer>($T1*)m_Data</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TStridedMemoryView&lt;*&gt;">
		<DisplayString>{{SMV Count={m_Storage.m_Count}, Data={(void*)m_Storage.m_RawDataPtr}, Stride={m_Storage.m_Stride}, sizeof={sizeof($T1)}}}</DisplayString>
		<Expand>
			<IndexListItems>
				<Size>m_Storage.m_Count</Size>
				<ValueNode>*(($T1*)(m_Storage.m_RawDataPtr + $i * m_Storage.m_Stride))</ValueNode>
			</IndexListItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TStridedMemoryViewWithFootprint&lt;*&gt;">
		<DisplayString>{{SMVF Count={m_Storage.m_Count}, Data={(void*)m_Storage.m_RawDataPtr}, Stride={m_Storage.m_Stride}, Footp={m_ElementFootprintInBytes}, sizeof={sizeof($T1)}}</DisplayString>
		<Expand>
			<IndexListItems>
				<Size>m_Storage.m_Count</Size>
				<ValueNode>*(($T1*)(m_Storage.m_RawDataPtr + $i * m_Storage.m_Stride))</ValueNode>
			</IndexListItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TPair&lt;*&gt;">
		<DisplayString>{{First={m_First}, Second={m_Second}}}</DisplayString>
		<Expand>
			<Item Name="m_First">m_First</Item>
			<Item Name="m_Second">m_Second</Item>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TFastHashMap&lt;*,*&gt;">
		<DisplayString>{{FHM Count={m_Count}, Data={(void*)m_Slots}, Size={m_Size}}}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>m_Size</Size>
				<ValuePointer>m_Slots</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::SCompilerTypeID">
		<DisplayString Condition="m_Index == 0xFFFFFFFF">{{INVALID Index={m_Index}}}</DisplayString>
		<DisplayString Condition="m_Index == 0x40000000">{{void Index={m_Index}}}</DisplayString>
		<DisplayString Condition="m_Index &amp; 0x0FFFFFFF == 0x1">{{byte Index={m_Index}}}</DisplayString>
		<DisplayString Condition="m_Index &amp; 0x0FFFFFFF == 0x2">{{float Index={m_Index}}}</DisplayString>
		<DisplayString Condition="m_Index &amp; 0x0FFFFFFF == 0x3">{{float2 Index={m_Index}}}</DisplayString>
		<DisplayString Condition="m_Index &amp; 0x0FFFFFFF == 0x4">{{float3 Index={m_Index}}}</DisplayString>
		<DisplayString Condition="m_Index &amp; 0x0FFFFFFF == 0x5">{{float4 Index={m_Index}}}</DisplayString>
		<DisplayString Condition="m_Index &amp; 0x0FFFFFFF == 0x6">{{int Index={m_Index}}}</DisplayString>
		<DisplayString Condition="m_Index &amp; 0x0FFFFFFF == 0x7">{{int2 Index={m_Index}}}</DisplayString>
		<DisplayString Condition="m_Index &amp; 0x0FFFFFFF == 0x8">{{int3 Index={m_Index}}}</DisplayString>
		<DisplayString Condition="m_Index &amp; 0x0FFFFFFF == 0x9">{{int4 Index={m_Index}}}</DisplayString>
		<DisplayString Condition="m_Index &amp; 0x0FFFFFFF == 0xA">{{string Index={m_Index}}}</DisplayString>
	</Type>

	<Type Name="PopcornFX::TVector&lt;*,*&gt;">
		<DisplayString>{m_Data}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>$T2</Size>
				<ValuePointer>m_Data</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TMatrix&lt;*,*,*&gt;">
		<DisplayString>{m_Data}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>$T2</Size>
				<ValuePointer>m_Axes</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="PopcornFX::TQuaternion&lt;*&gt;">
		<DisplayString>{{{m_Vec[0]}, {m_Vec[1]}, {m_Vec[2]}, {m_Real}}}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>4</Size>
				<ValuePointer>m_Data</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

</AutoVisualizer>
